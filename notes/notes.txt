Day 1 - MySQL 
https://dev.mysql.com/doc/refman/8.0/en/tutorial.html

DB (NoSQL)
	MongoDB 
	Redis 
	DynamoDB
	Cassandra 
	
DBMS (SQL)
	Oracle 
	MySQL 
	DB2 
	DB Derby 
	Postgres 
	

SQL - Structured Query Language 

DDL - Data Defintion Language 
	Create 
	Alter
	Truncate
	Drop 
	
DML - Data Manipulation Languge 
	Insert 
	Update 
	Delete
	Merge 

DQL - Data Query Language 
	Select 
	
TCL - Transaction Control Language 
	Commit 
	Rollback
	Save Point 
	
	
DCL - Data Control Language 
	Grant 
	Revoke 
	
	
	

1972 - IBM - EF Coff, 1972 
MS - Management System 
	A - Atomicity 
	C - Consistency 
	I - Isolation 
	D - Durability 
RDBMS - Relational Database Management System 


Row - Tuple 
Column - Field 

Table - Entity (Noun) - Singular 
	Bank
		bankid (PK)
		bankname (NN)
		bankloc
		
	branch 
		branch_id
		branch_name
		branch_addr
		branch_email
		bank_id
		
	Customer 
		custid (PK)
		custname (NN)
		custaddress 
		custemail (UK)
		custcontact (UK)
		
	Account 
		accno (PK) [UK + NN]
		acctype 
		branch_id (FK)
		accbal 
		accpin
		
Relation - Verb 
	has a 
	Belongs  to 


Rahul 
	Company (has) Employee
	Employee (has) Account


CRUD 
	- Create,Read, Update, Delete 


MySQL 


DDL - Data Defination Language 
	Create 
		- Constrains (PK, UK, NN, Default, FK)

char (30)
varchar (30)

> show databases; 
> create database bajaj_fin_serve_db; 
> use bajaj_fin_serve_db;
> show tables; 

> create table bank(bank_id int primary key,bank_name varchar(30) not null,bank_city varchar(30)); 

Alter
----------------------------------------------------------
// alter can be used to add a column, drop a column, add an index, drop an index 
> alter table bank add column bank_state varchar(30); 	
	
> alter table bank drop column bank_state; 
	
> alter table bank add column bank_state varchar(30); 	
	
> alter table bank add index inx_bank_city(bank_city)	
> desc bank ; 

// to list all the indexes 
> show index from bank; 
> show status 
write a query to drop the index which you have created 
> 	drop index inx_bank_city on bank;
> alter table bank drop index inx_bank_city;
	

> create table branch (
	branch_id int primary key auto_increment, 
	branch_name varchar(30) not null, 
	branch_addr varchar(30), 
	branch_email varchar(50), 
	bank_id int, 
	foreign key (bank_id) references bank(bank_id)
); 


branch | CREATE TABLE `branch` (
  `branch_id` int(11) NOT NULL AUTO_INCREMENT,
  `branch_name` varchar(30) NOT NULL,
  `branch_addr` varchar(30) DEFAULT NULL,
  `branch_email` varchar(50) DEFAULT NULL,
  `bank_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`branch_id`),
  KEY `bank_id` (`bank_id`),
  CONSTRAINT `branch_ibfk_1` FOREIGN KEY (`bank_id`) REFERENCES `bank` (`bank_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |




alter table to add foreign key to branch table 

alter table bank so that it can have auto increment 
> alter table bank modify  bank_id int auto_increment; 

> alter table branch drop index branch_ibfk_1; 

> show index from <table_name>; 

> alter table branch drop foreign key  branch_ibfk_1; 

> alter table branch add foreign key(bank_id) references bank(bank_id); 

- no conditions 
	Truncate
	Drop 


	
DML - Data Manipulation Languge 
	Insert 
> insert into bank (bank_name, bank_city, bank_state) values('SBI', 'Bengaluru', 'Karnataka'); 
> insert into bank (bank_name, bank_city, bank_state) values('HDFC', 'Bhubaneshwar', 'Odissa'); 
> insert into bank (bank_name, bank_city, bank_state) values('CANARA', 'Bengaluru', 'Karnataka'); 


> insert into branch (branch_name, branch_addr,branch_email,bank_id) values ('MG Road', 'Commercial street', 'contact.mgroad@sbi.com', 1); 

> insert into branch (branch_name, branch_addr,branch_email,bank_id) values ('Majestic', 'KG Road', 'contact.kgroad@sbi.com', 1); 

>  insert into branch (branch_name, branch_addr,branch_email,bank_id) values ('Koramangala', 'Koramangala', 'majestic.kgroad@sbi.com', 2);

- truncate - which will take off all the records from the table, and you cannot get it back 

> truncate table branch; 
- delete - delete specified record

Update 
> update branch set branch_email='koramnagala@sbi.com' where branch_id=3; 


	Delete
	Merge 


DQL 
- Select 
 

> select branch_name, branch_addr, if(branch_email is null,  "NOT AVAILABLE", branch_email) email from branch; 

> SELECT BRANCH_NAME, BRANCH_ADDR, IFNULL(BRANCH_EMAIL, "NOT AVAILABLE") EMAIL FROM BRANCH; 


partial_attribute_name% 
%partial_attribute_name
%partial_attribute_name% 


> select * from branch where branch_email like '%sbi%'; 

> select * from branch where branch_email like '%mgroad%' or branch_name like 'Kor%'; 

> select * from branch where bank_id between 1 and 2;

>  select * from branch where bank_id in (1,2) ; 


Select Statement format 

-- table level filtering 
select column[s] 
	from table[s], 
	[where condition[s], ] 
	order by [column/s]
	


select column[s] 
	from table[s], 
	where condition[s], 
	group by [column/s]
	having [condition/s]
	order by [column/s]
	

branch_name, branch_email,  (Branch)
bank_name, bank_city (Bank)



> select br.branch_name as NAME, br.branch_email, bn.bank_name, bn.bank_city, bn.bank_id
	from branch br, bank bn
	where br.bank_id = bn.bank_id; 


https://dev.mysql.com/doc/refman/8.0/en/tutorial.html




Day 2 - MySQL 

Day1 - Retro 
-----------------

Everything is stored in file 

JSON 
{
	empid:101, 
	empname:"Suresh", 
	empsalary : 23323, 
	address: {
		houseno : 101, 
		street : "Stephen Creek Blvd", 
		city :"Cupertino",
		state : "CA" 
	}
}


Three schema architecture 


To export 
> mysqldump -u root -p database_name > filename.sql

To import 
You have to login to 
> mysql -u root -p newdatabase_name < filename.sql 




Step 1: > create database newdatabase 
Step 2: > use newdatabase 
Step 3: > copy the content and paste it 


-- to display FIRSTNAME | LASTNAME | , EMAIL, DEPARTMENT_NAME  for all employees who belong to department_id =10 


> explain SELECT e.FIRSTNAME, e.LASTNAME, e.EMAIL, d.DEPARTMENT_NAME  FROM EMPLOYEES E, DEPARTMENTS D   WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.DEPARTMENT_ID=10;

> mysqlshow --verbose -u root -p
> mysqlshow -k bajaj_db1 -u root -p 
> mysqlshow -k bajaj_db1 EMPLOYEES -u root -p 



>  mysqlshow [OPTIONS] [database [table [column]]]


------------- 
InnoDB 
MyISAM 
-------------


List number of employees who are there in each department 

Aggregate functions 
 
SUM, COUNT, AVG, MIN, MAX 

> select count(*), max(salary), min(salary), DEPARTMENT_ID from employees group by department_id; 


> select count(*) from employees where department_id = 20



Equi 

Select e.empname, d,deptname, p.projname 
	from employee e, department d, project p 
	where e.deptid = d.deptid and e.projectid = p.projectid; 


Select empname from employee where depid between 10 and 40 ;
Select empname from employee where depid in (10,40) 


Select DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME IN ("IT", "Shipping"); 

Select FIRSTNAME from employees where department_id in (Select DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME IN ("IT", "Shipping")); 



Select * from employees where department_id =90; 

24000
17000
17000





> SELECT count(*), avg(salary), d.DEPARTMENT_NAME
	FROM employees e, departments d  
  	WHERE e.Salary > (SELECT avg(Salary) FROM employees where department_id = e.department_id)
	and d.DEPARTMENT_ID = e.DEPARTMENT_ID
	Group by e.department_id 




SELECT count(*), avg(salary), d.DEPARTMENT_NAME
	FROM employees e, departments d  
  	WHERE e.Salary > 10000
	and d.DEPARTMENT_ID = e.DEPARTMENT_ID
	Group by e.department_id 
(SELECT avg(Salary) FROM employees where department_id = e.department_id)


-- to list all employees who's salary is more than average salary in that department 

Select count(*),  department_id  from employees e1 where salary > (select avg(salary) from employees e2 where e1.department_id = e2.department_id) 
Group by department_id; 


-- inner join 
> select firstname, DEPARTMENT_NAME from employees e inner join  departments d on e.department_id = d.department_id ; 
	

 select distinct DEPARTMENT_NAME from employees e inner join  departments d on e.department_id = d.department_id ; 
	

1. Inner joins will give the records if it matches 
2. Outer joins will give the records if it does not match 
	a) Left Outer Join 
	b) Right Outer Join 
	c) Full Outer Join ( Left Outer Join  Union Right Outer Join ) 


mysql> select firstname, DEPARTMENT_NAME from employees e inner join  departments d on e.department_id = d.department_id ; 


> select e.firstname, d.department_name from departments d left outer join employees e on e.department_id = d.department_id  where e.firstname is null; 

Empname = ''; 
Empname is null (correct) 




Self Join (join table with same table ) 



employee_id | firstname | manager_id |
+-------------+-----------+------------+
|         100 | Steven    |       NULL |
|         101 | Neena     |        100 |
|         102 | Lex       |        100 |
|         103 | Alexander |        102 |
|         104 | Bruce     |        103 |
+-------------+-----------+------------+
 

 Select   e.firstname as 'EMPLOYEE', 'reports to',  m.firstname as 'MANAGER'  from employees e inner join employees m on m.employee_id = e.manager_id;


E 
+-------------+-----------+------------+
|         100 | Steven    |       NULL |
|         101 | Neena     |        100 |
|         102 | Lex       |        100 |
|         103 | Alexander |        102 |
|         104 | Bruce     |        103 |
+-------------+-----------+------------+

M 
+-------------+-----------+------------+
|         100 | Steven    |       NULL |
|         101 | Neena     |        100 |
|         102 | Lex       |        100 |
|         103 | Alexander |        102 |
|         104 | Bruce     |        103 |
+-------------+-----------+------------+


-- self outer join 

> select upper(ifnull(m.firstname, 'Managing Director')) as 'Manager' , upper(e.firstname) as 'Employee' from employees e left outer join employees m on m.employee_id = e.manager_id; 


> insert into t1 values('{mykey:"my value"}'); 




Day 3 - JavaScript 

Web Server 
----------
Tomcat  (java) 
DJango (Pyhton)
IIS (MS)
WebLogic (Java)
NodeJS (Javascript)
Webspehere (Java)
jetty (Java)


int x; 

var x = 10 ; 
var x = 23.4; 
var x = "hi"; 
var x = true; 
var x = new Employee(); 


var x = 10;var x = 23.4
var x = "hi"
var x = true
var x = new Employee()


Enter email : hello@hello.com  (client side, format checking )
Enter email : hello@hello.com  (server side, user checking )



1. alert - void 
2. prompt - string (Text box)
3. confirm - boolean (OK/Cancel)


? - 0 or 1 
* 0 or more 
+ 1 or more 
. 1 
[0-9] 


x=10; -- this is global variable 
var x= 10; this will be private 


Object - Built In 
new - memory getting allocated 
function is treated as class 
public - prototype 



function Person(name, pid) {
	this.name = name; 
	this.pid = pid; 
}
================================================
class Person {

	String name; 
	int pid; 
	Person(String name, int pid) {
		this.name = name; 
		this.pid = pid; 
	}
	
	void display(int x) {
		print(this.name)
		print(this.name)
	}
	
	public void display(String x ) {
		print(this.name)
		print(this.name)
	}
}


function Person(name, pid) {
	this.name = name; 
	this.pid = pid; 
	
	// scope 
	display=  function () {
		console.log(this.name); 
		console.log(this.name); 
	}
}
Person.prototype.display1 = function () {
		console.log(this.name); 
		console.log(this.name);
}


arr
100
200
300
400
500



arr.splice(indx, [no_of_elemnets_to_delete], [elements_to_add])

arr.splice(4, 2)
arr.splice(4, 2, 2,3,4,5)

arr.splice(4, 0, 2,3,4,5)





function Person(name, pid) {
	this.name = name; 
	this.pid = pid; 
	
	myfunc = function() {
		// something 
	}
}



function sum() {
}
 

--- calling 
sum() 
sum(10)
sum(10,20)
sum(10,20,3,4,5,6,7,8,9,22)





https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference


















Day 4 - React Native 





